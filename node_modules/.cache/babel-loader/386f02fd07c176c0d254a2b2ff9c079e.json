{"ast":null,"code":"import _toConsumableArray from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/src/battle_context/BattleProvider.js\";\nimport React, { Component } from \"react\";\nimport BattleContext from \"./BattleContext\";\nimport firebase from \"../firebase\";\nimport getRandomNumber from \"./getRandomNumber\";\nimport changeNickname from \"./changeNickname\";\nimport nicknameChecked from \"./nicknameChecked\";\nimport displayCollapseId from \"./displayCollapseId\";\nimport addSelectedHeroOnSelectedCard from \"./addSelectedHeroOnSelectedCard\";\nimport changePlayer from \"./changePlayer\";\nimport setRandomStatRound from \"./setRandomStatRound\";\nimport changeStatForFight from \"./changeStatForFight\";\nimport generateDeck from \"./generateDeck\";\nimport changeTransitionRound from \"./changeTransitionRound\";\nimport goToNextRound from \"./goToNextRound\";\nimport _hasWonRound from \"./hasWonRound\";\nvar listHeroes = [18, 30, 34, 57, 60, 63, 69, 92, 145, 162, 165, 207, 208, 213, 222, 226, 263, 310, 313, 322, 341, 346, 354, 361, 386, 416, 418, 423, 427, 435, 441, 462, 485, 489, 490, 502, 514, 522, 523, 526, 529, 566, 567, 619, 620, 627, 639, 644, 672, 687, 729];\n\nvar BattleProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BattleProvider, _Component);\n\n  function BattleProvider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BattleProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BattleProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      battle: {\n        stats: [\"Strength\", \"Speed\", \"Intelligence\", \"Durability\"],\n        heroes: [],\n        player_1: {\n          nickname: \"\",\n          nicknameChecked: false,\n          deck: [],\n          score: 0,\n          selectedCard: {}\n        },\n        player_2: {\n          nickname: \"\",\n          nicknameChecked: false,\n          deck: [],\n          score: 0,\n          selectedCard: {}\n        },\n        round: {\n          roundFinished: false,\n          roundNumber: 0,\n          randomStat: 0,\n          currentPlayer: \"player_1\",\n          transition: true,\n          roundWinner: 0,\n          matchFinished: false\n        }\n      },\n      collapse: false,\n      isCollapse: 0,\n      selectedHeroOfList: [],\n      searchInputHeroList: \"\",\n      history: []\n    };\n    return _this;\n  }\n\n  _createClass(BattleProvider, [{\n    key: \"callApiSuperHeroes\",\n    value: function callApiSuperHeroes() {\n      var _this2 = this;\n\n      for (var i = 0; i < listHeroes.length; i++) {\n        fetch(\"https://cors-anywhere.herokuapp.com/http://superheroapi.com/api.php/2368931693133321/\".concat(listHeroes[i])).then(function (results) {\n          return results.json();\n        }) // conversion du rÃ©sultat en JSON\n        .then(function (data) {\n          data.used = false;\n\n          _this2.setState({\n            battle: _objectSpread({}, _this2.state.battle, {\n              heroes: _toConsumableArray(_this2.state.battle.heroes).concat([data])\n            })\n          });\n        });\n      }\n    }\n  }, {\n    key: \"getStorage\",\n    value: function getStorage() {\n      var _this3 = this;\n\n      var itemsRef = firebase.database().ref('history');\n      itemsRef.on('value', function (snapshot) {\n        var items = snapshot.val();\n        var newState = [];\n\n        for (var item in items) {\n          newState.push({\n            id: item,\n            winner: items[item].winner,\n            loser: items[item].loser,\n            date: items[item].date\n          });\n        }\n\n        _this3.setState({\n          history: newState\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.callApiSuperHeroes();\n      this.getStorage();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(BattleContext.Provider, {\n        value: {\n          state: this.state,\n          handleChangeNickname: function handleChangeNickname(event, name) {\n            return _this4.setState(changeNickname(_this4.state, event, name));\n          },\n          submitCheck: function submitCheck(name) {\n            _this4.setState(nicknameChecked(_this4.state, name));\n          },\n          onPressEnterNicknameChecked: function onPressEnterNicknameChecked(event, name, nicknameLength) {\n            if (event.charCode === 13 && nicknameLength > 2) {\n              _this4.setState(nicknameChecked(_this4.state, name));\n            }\n          },\n          toggle: function toggle(id) {\n            _this4.setState(displayCollapseId(id));\n          },\n          handleSearchListChange: function handleSearchListChange(event) {\n            _this4.setState({\n              searchInputHeroList: event.target.value,\n              collapse: false\n            });\n          },\n          selectHero: function selectHero(idHero) {\n            var heroUsed = 0;\n\n            _this4.state.battle[_this4.state.battle.round.currentPlayer].deck.map(function (hero) {\n              if (hero.id === idHero) {\n                !hero.used ? heroUsed = 0 : heroUsed = 1;\n              }\n\n              return hero;\n            });\n\n            if (!heroUsed) {\n              _this4.setState(addSelectedHeroOnSelectedCard(_this4.state, idHero));\n\n              setTimeout(function () {\n                _this4.setState(changePlayer(_this4.state));\n              }, 1000);\n            }\n          },\n          setRandomStat: function setRandomStat() {\n            _this4.setState(setRandomStatRound(_this4.state));\n          },\n          setNewFight: function setNewFight() {\n            _this4.setState(changeStatForFight(_this4.state));\n          },\n          initialisationAndStartCombat: function initialisationAndStartCombat() {\n            var deckTotal = generateDeck(_this4.state, 12);\n            var deck_player_1 = deckTotal.slice(0, 6);\n            var deck_player_2 = deckTotal.slice(6, 12);\n\n            _this4.setState({\n              battle: _objectSpread({}, _this4.state.battle, {\n                player_1: _objectSpread({}, _this4.state.battle.player_1, {\n                  deck: deck_player_1\n                }),\n                player_2: _objectSpread({}, _this4.state.battle.player_2, {\n                  deck: deck_player_2\n                }),\n                round: _objectSpread({}, _this4.state.battle.round, {\n                  roundNumber: 1,\n                  randomStat: getRandomNumber(_this4.state.battle.stats.length)\n                })\n              })\n            });\n          },\n          handleChangeTransition: function handleChangeTransition() {\n            _this4.setState(changeTransitionRound(_this4.state));\n          },\n          getToNextRound: function getToNextRound() {\n            _this4.setState(goToNextRound(_this4.state));\n          },\n          hasWonRound: function hasWonRound(statHeroPlayer1, statHeroPlayer2) {\n            _this4.setState(_hasWonRound(statHeroPlayer1, statHeroPlayer2, _this4.state));\n          },\n          getToFinalScore: function getToFinalScore() {\n            _this4.setState({\n              battle: _objectSpread({}, _this4.state.battle, {\n                round: _objectSpread({}, _this4.state.battle.round, {\n                  matchFinished: true\n                })\n              })\n            });\n          },\n          setRematch: function setRematch() {\n            var deckTotal = generateDeck(_this4.state, 12);\n            var deck_player_1 = deckTotal.slice(0, 6);\n            var deck_player_2 = deckTotal.slice(6, 12);\n\n            _this4.setState({\n              battle: _objectSpread({}, _this4.state.battle, {\n                player_1: _objectSpread({}, _this4.state.battle.player_1, {\n                  deck: deck_player_1,\n                  score: 0,\n                  selectedCard: {}\n                }),\n                player_2: _objectSpread({}, _this4.state.battle.player_2, {\n                  deck: deck_player_2,\n                  score: 0,\n                  selectedCard: {}\n                }),\n                round: {\n                  roundFinished: false,\n                  roundNumber: 1,\n                  randomStat: 0,\n                  currentPlayer: \"player_1\",\n                  transition: true,\n                  roundWinner: 0,\n                  matchFinished: false\n                }\n              })\n            });\n          },\n          resetAllDataBattle: function resetAllDataBattle() {\n            var oneCard = 0;\n            var deck = [];\n\n            for (var i = 12; i > 0; i--) {\n              var randomN = Math.floor(Math.random() * _this4.state.battle.heroes.length);\n              oneCard = _this4.state.battle.heroes[randomN];\n\n              if (deck.indexOf(oneCard) === -1) {\n                deck.push(oneCard);\n              } else {\n                i++;\n              }\n            }\n\n            var deck_player_1 = deck.slice(0, 6);\n            var deck_player_2 = deck.slice(6, 12);\n\n            _this4.setState({\n              battle: _objectSpread({}, _this4.state.battle, {\n                player_1: {\n                  nickname: \"\",\n                  nicknameChecked: false,\n                  deck: deck_player_1,\n                  score: 0,\n                  selectedCard: {}\n                },\n                player_2: {\n                  nickname: \"\",\n                  nicknameChecked: false,\n                  deck: deck_player_2,\n                  score: 0,\n                  selectedCard: {}\n                },\n                round: {\n                  roundFinished: false,\n                  roundNumber: 0,\n                  randomStat: 0,\n                  currentPlayer: \"player_1\",\n                  transition: true,\n                  roundWinner: 0,\n                  matchFinished: false\n                }\n              })\n            });\n          },\n          setStorage: function setStorage(player_1, player_2) {\n            var prevState = _this4.state.history;\n            var gameCompleteDate = new Date();\n            var gameDisplayDate = \"\".concat(gameCompleteDate.getMonth() + 1, \"/\").concat(gameCompleteDate.getDate(), \"/\").concat(gameCompleteDate.getFullYear());\n            var winner = player_1.score > player_2.score ? player_1 : player_2;\n            var loser = player_1.score > player_2.score ? player_2 : player_1;\n            var getMatchData = {\n              winner: winner,\n              loser: loser,\n              date: gameDisplayDate\n            };\n            var itemsRef = firebase.database().ref('history');\n            itemsRef.push(getMatchData);\n\n            _this4.setState({\n              currentItem: '',\n              username: ''\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return BattleProvider;\n}(Component);\n\nexport default BattleProvider;","map":{"version":3,"sources":["/home/bourmeau/workspace/wildbattle/reims-0918-js-wild-battle/src/battle_context/BattleProvider.js"],"names":["React","Component","BattleContext","firebase","getRandomNumber","changeNickname","nicknameChecked","displayCollapseId","addSelectedHeroOnSelectedCard","changePlayer","setRandomStatRound","changeStatForFight","generateDeck","changeTransitionRound","goToNextRound","hasWonRound","listHeroes","BattleProvider","state","battle","stats","heroes","player_1","nickname","deck","score","selectedCard","player_2","round","roundFinished","roundNumber","randomStat","currentPlayer","transition","roundWinner","matchFinished","collapse","isCollapse","selectedHeroOfList","searchInputHeroList","history","i","length","fetch","then","results","json","data","used","setState","itemsRef","database","ref","on","snapshot","items","val","newState","item","push","id","winner","loser","date","callApiSuperHeroes","getStorage","handleChangeNickname","event","name","submitCheck","onPressEnterNicknameChecked","nicknameLength","charCode","toggle","handleSearchListChange","target","value","selectHero","idHero","heroUsed","map","hero","setTimeout","setRandomStat","setNewFight","initialisationAndStartCombat","deckTotal","deck_player_1","slice","deck_player_2","handleChangeTransition","getToNextRound","statHeroPlayer1","statHeroPlayer2","getToFinalScore","setRematch","resetAllDataBattle","oneCard","randomN","Math","floor","random","indexOf","setStorage","prevState","gameCompleteDate","Date","gameDisplayDate","getMonth","getDate","getFullYear","getMatchData","currentItem","username","props","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport BattleContext from \"./BattleContext\";\n\nimport firebase from \"../firebase\"\n\nimport getRandomNumber from \"./getRandomNumber\";\n\nimport changeNickname from \"./changeNickname\";\nimport nicknameChecked from \"./nicknameChecked\";\nimport displayCollapseId from \"./displayCollapseId\";\nimport addSelectedHeroOnSelectedCard from \"./addSelectedHeroOnSelectedCard\";\nimport changePlayer from \"./changePlayer\";\nimport setRandomStatRound from \"./setRandomStatRound\";\nimport changeStatForFight from \"./changeStatForFight\";\nimport generateDeck from \"./generateDeck\";\nimport changeTransitionRound from \"./changeTransitionRound\";\nimport goToNextRound from \"./goToNextRound\";\nimport hasWonRound from \"./hasWonRound\";\n\nconst listHeroes = [\n  18,\n  30,\n  34,\n  57,\n  60,\n  63,\n  69,\n  92,\n  145,\n  162,\n  165,\n  207,\n  208,\n  213,\n  222,\n  226,\n  263,\n  310,\n  313,\n  322,\n  341,\n  346,\n  354,\n  361,\n  386,\n  416,\n  418,\n  423,\n  427,\n  435,\n  441,\n  462,\n  485,\n  489,\n  490,\n  502,\n  514,\n  522,\n  523,\n  526,\n  529,\n  566,\n  567,\n  619,\n  620,\n  627,\n  639,\n  644,\n  672,\n  687,\n  729\n];\n\nclass BattleProvider extends Component {\n  state = {\n    battle: {\n      stats: [\"Strength\", \"Speed\", \"Intelligence\", \"Durability\"],\n      heroes: [],\n      player_1: {\n        nickname: \"\",\n        nicknameChecked: false,\n        deck: [],\n        score: 0,\n        selectedCard: {}\n      },\n      player_2: {\n        nickname: \"\",\n        nicknameChecked: false,\n        deck: [],\n        score: 0,\n        selectedCard: {}\n      },\n      round: {\n        roundFinished: false,\n        roundNumber: 0,\n        randomStat: 0,\n        currentPlayer: \"player_1\",\n        transition: true,\n        roundWinner: 0,\n        matchFinished: false\n      }\n    },\n    collapse: false,\n    isCollapse: 0,\n    selectedHeroOfList: [],\n    searchInputHeroList: \"\",\n    history: []\n  };\n\n  callApiSuperHeroes() {\n    for (let i = 0; i < listHeroes.length; i++) {\n      fetch(`https://cors-anywhere.herokuapp.com/http://superheroapi.com/api.php/2368931693133321/${listHeroes[i]}`)\n        .then(results => results.json()) // conversion du rÃ©sultat en JSON\n        .then(data => {\n          data.used = false;\n          this.setState({\n            battle: {\n              ...this.state.battle,\n              heroes: [...this.state.battle.heroes, data]\n            }\n          });\n        });\n    }\n  }\n\n  getStorage() {\n    const itemsRef = firebase.database().ref('history');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          winner: items[item].winner,\n          loser: items[item].loser,\n          date: items[item].date\n        });\n      }\n      this.setState({\n        history: newState\n      });\n    });\n  }\n  componentDidMount() {\n    this.callApiSuperHeroes();\n    this.getStorage();\n  }\n\n  render() {\n    return (\n      <BattleContext.Provider\n        value={{\n          state: this.state,\n          handleChangeNickname: (event, name) =>\n            this.setState(changeNickname(this.state, event, name)),\n          submitCheck: name => {\n            this.setState(nicknameChecked(this.state, name));\n          },\n          onPressEnterNicknameChecked: (event, name, nicknameLength) => {\n            if (event.charCode === 13 && nicknameLength > 2) {\n              this.setState(nicknameChecked(this.state, name));\n            }\n          },\n          toggle: id => {\n            this.setState(displayCollapseId(id));\n          },\n          handleSearchListChange: event => {\n            this.setState({\n              searchInputHeroList: event.target.value,\n              collapse: false\n            });\n          },\n          selectHero: idHero => {\n            let heroUsed = 0;\n            this.state.battle[this.state.battle.round.currentPlayer].deck.map(\n              hero => {\n                if (hero.id === idHero) {\n                  !hero.used ? (heroUsed = 0) : (heroUsed = 1);\n                }\n                return hero;\n              }\n            );\n\n            if (!heroUsed) {\n              this.setState(addSelectedHeroOnSelectedCard(this.state, idHero));\n              setTimeout(() => {\n                this.setState(changePlayer(this.state));\n              }, 1000);\n            }\n          },\n\n          setRandomStat: () => {\n            this.setState(setRandomStatRound(this.state));\n          },\n\n          setNewFight: () => {\n            this.setState(changeStatForFight(this.state));\n          },\n          initialisationAndStartCombat: () => {\n            const deckTotal = generateDeck(this.state, 12);\n            const deck_player_1 = deckTotal.slice(0, 6);\n            const deck_player_2 = deckTotal.slice(6, 12);\n\n            this.setState({\n              battle: {\n                ...this.state.battle,\n                player_1: {\n                  ...this.state.battle.player_1,\n                  deck: deck_player_1\n                },\n                player_2: {\n                  ...this.state.battle.player_2,\n                  deck: deck_player_2\n                },\n                round: {\n                  ...this.state.battle.round,\n                  roundNumber: 1,\n                  randomStat: getRandomNumber(this.state.battle.stats.length)\n                }\n              }\n            });\n          },\n          handleChangeTransition: () => {\n            this.setState(changeTransitionRound(this.state));\n          },\n          getToNextRound: () => {\n            this.setState(goToNextRound(this.state));\n          },\n          hasWonRound: (statHeroPlayer1, statHeroPlayer2) => {\n            this.setState(\n              hasWonRound(statHeroPlayer1, statHeroPlayer2, this.state)\n            );\n          },\n\n          getToFinalScore: () => {\n            this.setState({\n              battle: {\n                ...this.state.battle,\n                round: {\n                  ...this.state.battle.round,\n                  matchFinished: true\n                }\n              }\n            });\n          },\n\n          setRematch: () => {\n            const deckTotal = generateDeck(this.state, 12);\n            const deck_player_1 = deckTotal.slice(0, 6);\n            const deck_player_2 = deckTotal.slice(6, 12);\n\n            this.setState({\n              battle: {\n                ...this.state.battle,\n                player_1: {\n                  ...this.state.battle.player_1,\n                  deck: deck_player_1,\n                  score: 0,\n                  selectedCard: {}\n                },\n                player_2: {\n                  ...this.state.battle.player_2,\n                  deck: deck_player_2,\n                  score: 0,\n                  selectedCard: {}\n                },\n                round: {\n                  roundFinished: false,\n                  roundNumber: 1,\n                  randomStat: 0,\n                  currentPlayer: \"player_1\",\n                  transition: true,\n                  roundWinner: 0,\n                  matchFinished: false\n                }\n              }\n            });\n          },\n\n          resetAllDataBattle: () => {\n            let oneCard = 0;\n            const deck = [];\n            for (let i = 12; i > 0; i--) {\n              const randomN = Math.floor(\n                Math.random() * this.state.battle.heroes.length\n              );\n              oneCard = this.state.battle.heroes[randomN];\n              if (deck.indexOf(oneCard) === -1) {\n                deck.push(oneCard);\n              } else {\n                i++;\n              }\n            }\n\n            const deck_player_1 = deck.slice(0, 6);\n            const deck_player_2 = deck.slice(6, 12);\n            this.setState({\n              battle: {\n                ...this.state.battle,\n                player_1: {\n                  nickname: \"\",\n                  nicknameChecked: false,\n                  deck: deck_player_1,\n                  score: 0,\n                  selectedCard: {}\n                },\n                player_2: {\n                  nickname: \"\",\n                  nicknameChecked: false,\n                  deck: deck_player_2,\n                  score: 0,\n                  selectedCard: {}\n                },\n                round: {\n                  roundFinished: false,\n                  roundNumber: 0,\n                  randomStat: 0,\n                  currentPlayer: \"player_1\",\n                  transition: true,\n                  roundWinner: 0,\n                  matchFinished: false\n                }\n              }\n            });\n          },\n\n          setStorage: (player_1, player_2) => {\n            let prevState = this.state.history;\n            const gameCompleteDate = new Date();\n            const gameDisplayDate = `${gameCompleteDate.getMonth() +\n              1}/${gameCompleteDate.getDate()}/${gameCompleteDate.getFullYear()}`;\n            const winner =\n              player_1.score > player_2.score ? player_1 : player_2;\n            const loser = player_1.score > player_2.score ? player_2 : player_1;\n            const getMatchData = {\n              winner: winner,\n              loser: loser,\n              date: gameDisplayDate\n            };\n            const itemsRef = firebase.database().ref('history');\n\n            itemsRef.push(getMatchData);\n            this.setState({\n              currentItem: '',\n              username: ''\n            });\n          }\n        }}\n      >\n        {this.props.children}\n      </BattleContext.Provider>\n    );\n  }\n}\n\nexport default BattleProvider;\n"]},"metadata":{},"sourceType":"module"}